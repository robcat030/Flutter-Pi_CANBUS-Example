// ignore_for_file: unused_field
import 'custom_bindings.dart';
// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// LibCPlatformBackendGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names, camel_case_types, unnecessary_brace_in_string_interps, unused_element

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// libc backend for arm
class LibCArm32 {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibCArm32(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibCArm32.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int ioctl(
    int __fd,
    int __request,
  ) {
    return _ioctl(
      __fd,
      __request,
    );
  }

  late final _ioctl_ptr = _lookup<ffi.NativeFunction<Native_ioctl>>('ioctl');
  late final _dart_ioctl _ioctl = _ioctl_ptr.asFunction<_dart_ioctl>();

  int epoll_create(
    int __size,
  ) {
    return _epoll_create(
      __size,
    );
  }

  late final _epoll_create_ptr =
      _lookup<ffi.NativeFunction<Native_epoll_create>>('epoll_create');
  late final _dart_epoll_create _epoll_create =
      _epoll_create_ptr.asFunction<_dart_epoll_create>();

  int epoll_create1(
    int __flags,
  ) {
    return _epoll_create1(
      __flags,
    );
  }

  late final _epoll_create1_ptr =
      _lookup<ffi.NativeFunction<Native_epoll_create1>>('epoll_create1');
  late final _dart_epoll_create1 _epoll_create1 =
      _epoll_create1_ptr.asFunction<_dart_epoll_create1>();

  int epoll_ctl(
    int __epfd,
    int __op,
    int __fd,
    ffi.Pointer<epoll_event> __event,
  ) {
    return _epoll_ctl(
      __epfd,
      __op,
      __fd,
      __event,
    );
  }

  late final _epoll_ctl_ptr =
      _lookup<ffi.NativeFunction<Native_epoll_ctl>>('epoll_ctl');
  late final _dart_epoll_ctl _epoll_ctl =
      _epoll_ctl_ptr.asFunction<_dart_epoll_ctl>();

  int epoll_wait(
    int __epfd,
    ffi.Pointer<epoll_event> __events,
    int __maxevents,
    int __timeout,
  ) {
    return _epoll_wait(
      __epfd,
      __events,
      __maxevents,
      __timeout,
    );
  }

  late final _epoll_wait_ptr =
      _lookup<ffi.NativeFunction<Native_epoll_wait>>('epoll_wait');
  late final _dart_epoll_wait _epoll_wait =
      _epoll_wait_ptr.asFunction<_dart_epoll_wait>();

  int socket(
    int __domain,
    int __type,
    int __protocol,
  ) {
    return _socket(
      __domain,
      __type,
      __protocol,
    );
  }

  late final _socket_ptr = _lookup<ffi.NativeFunction<Native_socket>>('socket');
  late final _dart_socket _socket = _socket_ptr.asFunction<_dart_socket>();

  int socketpair(
    int __domain,
    int __type,
    int __protocol,
    ffi.Pointer<ffi.Int32> __fds,
  ) {
    return _socketpair(
      __domain,
      __type,
      __protocol,
      __fds,
    );
  }

  late final _socketpair_ptr =
      _lookup<ffi.NativeFunction<Native_socketpair>>('socketpair');
  late final _dart_socketpair _socketpair =
      _socketpair_ptr.asFunction<_dart_socketpair>();

  int bind(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    int __len,
  ) {
    return _bind(
      __fd,
      __addr,
      __len,
    );
  }

  late final _bind_ptr = _lookup<ffi.NativeFunction<Native_bind>>('bind');
  late final _dart_bind _bind = _bind_ptr.asFunction<_dart_bind>();

  int getsockname(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    ffi.Pointer<ffi.Uint32> __len,
  ) {
    return _getsockname(
      __fd,
      __addr,
      __len,
    );
  }

  late final _getsockname_ptr =
      _lookup<ffi.NativeFunction<Native_getsockname>>('getsockname');
  late final _dart_getsockname _getsockname =
      _getsockname_ptr.asFunction<_dart_getsockname>();

  int connect(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    int __len,
  ) {
    return _connect(
      __fd,
      __addr,
      __len,
    );
  }

  late final _connect_ptr =
      _lookup<ffi.NativeFunction<Native_connect>>('connect');
  late final _dart_connect _connect = _connect_ptr.asFunction<_dart_connect>();

  int getpeername(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    ffi.Pointer<ffi.Uint32> __len,
  ) {
    return _getpeername(
      __fd,
      __addr,
      __len,
    );
  }

  late final _getpeername_ptr =
      _lookup<ffi.NativeFunction<Native_getpeername>>('getpeername');
  late final _dart_getpeername _getpeername =
      _getpeername_ptr.asFunction<_dart_getpeername>();

  int send(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __flags,
  ) {
    return _send(
      __fd,
      __buf,
      __n,
      __flags,
    );
  }

  late final _send_ptr = _lookup<ffi.NativeFunction<Native_send>>('send');
  late final _dart_send _send = _send_ptr.asFunction<_dart_send>();

  int recv(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __flags,
  ) {
    return _recv(
      __fd,
      __buf,
      __n,
      __flags,
    );
  }

  late final _recv_ptr = _lookup<ffi.NativeFunction<Native_recv>>('recv');
  late final _dart_recv _recv = _recv_ptr.asFunction<_dart_recv>();

  int recvfrom(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __flags,
    ffi.Pointer<sockaddr> __addr,
    ffi.Pointer<ffi.Uint32> __addr_len,
  ) {
    return _recvfrom(
      __fd,
      __buf,
      __n,
      __flags,
      __addr,
      __addr_len,
    );
  }

  late final _recvfrom_ptr =
      _lookup<ffi.NativeFunction<Native_recvfrom>>('recvfrom');
  late final _dart_recvfrom _recvfrom =
      _recvfrom_ptr.asFunction<_dart_recvfrom>();

  int sendmsg(
    int __fd,
    ffi.Pointer<msghdr> __message,
    int __flags,
  ) {
    return _sendmsg(
      __fd,
      __message,
      __flags,
    );
  }

  late final _sendmsg_ptr =
      _lookup<ffi.NativeFunction<Native_sendmsg>>('sendmsg');
  late final _dart_sendmsg _sendmsg = _sendmsg_ptr.asFunction<_dart_sendmsg>();

  int recvmsg(
    int __fd,
    ffi.Pointer<msghdr> __message,
    int __flags,
  ) {
    return _recvmsg(
      __fd,
      __message,
      __flags,
    );
  }

  late final _recvmsg_ptr =
      _lookup<ffi.NativeFunction<Native_recvmsg>>('recvmsg');
  late final _dart_recvmsg _recvmsg = _recvmsg_ptr.asFunction<_dart_recvmsg>();

  int getsockopt(
    int __fd,
    int __level,
    int __optname,
    ffi.Pointer<ffi.Void> __optval,
    ffi.Pointer<ffi.Uint32> __optlen,
  ) {
    return _getsockopt(
      __fd,
      __level,
      __optname,
      __optval,
      __optlen,
    );
  }

  late final _getsockopt_ptr =
      _lookup<ffi.NativeFunction<Native_getsockopt>>('getsockopt');
  late final _dart_getsockopt _getsockopt =
      _getsockopt_ptr.asFunction<_dart_getsockopt>();

  int setsockopt(
    int __fd,
    int __level,
    int __optname,
    ffi.Pointer<ffi.Void> __optval,
    int __optlen,
  ) {
    return _setsockopt(
      __fd,
      __level,
      __optname,
      __optval,
      __optlen,
    );
  }

  late final _setsockopt_ptr =
      _lookup<ffi.NativeFunction<Native_setsockopt>>('setsockopt');
  late final _dart_setsockopt _setsockopt =
      _setsockopt_ptr.asFunction<_dart_setsockopt>();

  int listen(
    int __fd,
    int __n,
  ) {
    return _listen(
      __fd,
      __n,
    );
  }

  late final _listen_ptr = _lookup<ffi.NativeFunction<Native_listen>>('listen');
  late final _dart_listen _listen = _listen_ptr.asFunction<_dart_listen>();

  int accept(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    ffi.Pointer<ffi.Uint32> __addr_len,
  ) {
    return _accept(
      __fd,
      __addr,
      __addr_len,
    );
  }

  late final _accept_ptr = _lookup<ffi.NativeFunction<Native_accept>>('accept');
  late final _dart_accept _accept = _accept_ptr.asFunction<_dart_accept>();

  int shutdown(
    int __fd,
    int __how,
  ) {
    return _shutdown(
      __fd,
      __how,
    );
  }

  late final _shutdown_ptr =
      _lookup<ffi.NativeFunction<Native_shutdown>>('shutdown');
  late final _dart_shutdown _shutdown =
      _shutdown_ptr.asFunction<_dart_shutdown>();

  ffi.Pointer<ffi.Int32> errno_location() {
    return _errno_location();
  }

  late final _errno_location_ptr =
      _lookup<ffi.NativeFunction<Native_errno_location>>('__errno_location');
  late final _dart_errno_location _errno_location =
      _errno_location_ptr.asFunction<_dart_errno_location>();

  int open(
    ffi.Pointer<ffi.Uint8> __file,
    int __oflag,
  ) {
    return _open(
      __file,
      __oflag,
    );
  }

  late final _open_ptr = _lookup<ffi.NativeFunction<Native_open>>('open');
  late final _dart_open _open = _open_ptr.asFunction<_dart_open>();

  int close(
    int __fd,
  ) {
    return _close(
      __fd,
    );
  }

  late final _close_ptr = _lookup<ffi.NativeFunction<Native_close>>('close');
  late final _dart_close _close = _close_ptr.asFunction<_dart_close>();

  int read(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
  ) {
    return _read(
      __fd,
      __buf,
      __nbytes,
    );
  }

  late final _read_ptr = _lookup<ffi.NativeFunction<Native_read>>('read');
  late final _dart_read _read = _read_ptr.asFunction<_dart_read>();

  int write(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
  ) {
    return _write(
      __fd,
      __buf,
      __n,
    );
  }

  late final _write_ptr = _lookup<ffi.NativeFunction<Native_write>>('write');
  late final _dart_write _write = _write_ptr.asFunction<_dart_write>();

  int tcgetpgrp(
    int __fd,
  ) {
    return _tcgetpgrp(
      __fd,
    );
  }

  late final _tcgetpgrp_ptr =
      _lookup<ffi.NativeFunction<Native_tcgetpgrp>>('tcgetpgrp');
  late final _dart_tcgetpgrp _tcgetpgrp =
      _tcgetpgrp_ptr.asFunction<_dart_tcgetpgrp>();

  int tcsetpgrp(
    int __fd,
    int __pgrp_id,
  ) {
    return _tcsetpgrp(
      __fd,
      __pgrp_id,
    );
  }

  late final _tcsetpgrp_ptr =
      _lookup<ffi.NativeFunction<Native_tcsetpgrp>>('tcsetpgrp');
  late final _dart_tcsetpgrp _tcsetpgrp =
      _tcsetpgrp_ptr.asFunction<_dart_tcsetpgrp>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final LibCArm32 _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<Native_ioctl>> get ioctl =>
      _library._ioctl_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_epoll_create>> get epoll_create =>
      _library._epoll_create_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_epoll_create1>> get epoll_create1 =>
      _library._epoll_create1_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_epoll_ctl>> get epoll_ctl =>
      _library._epoll_ctl_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_epoll_wait>> get epoll_wait =>
      _library._epoll_wait_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_socket>> get socket =>
      _library._socket_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_socketpair>> get socketpair =>
      _library._socketpair_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_bind>> get bind => _library._bind_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_getsockname>> get getsockname =>
      _library._getsockname_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_connect>> get connect =>
      _library._connect_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_getpeername>> get getpeername =>
      _library._getpeername_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_send>> get send => _library._send_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_recv>> get recv => _library._recv_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_recvfrom>> get recvfrom =>
      _library._recvfrom_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_sendmsg>> get sendmsg =>
      _library._sendmsg_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_recvmsg>> get recvmsg =>
      _library._recvmsg_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_getsockopt>> get getsockopt =>
      _library._getsockopt_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_setsockopt>> get setsockopt =>
      _library._setsockopt_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_listen>> get listen =>
      _library._listen_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_accept>> get accept =>
      _library._accept_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_shutdown>> get shutdown =>
      _library._shutdown_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_errno_location>> get errno_location =>
      _library._errno_location_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_open>> get open => _library._open_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_close>> get close =>
      _library._close_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_read>> get read => _library._read_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_write>> get write =>
      _library._write_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_tcgetpgrp>> get tcgetpgrp =>
      _library._tcgetpgrp_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_tcsetpgrp>> get tcsetpgrp =>
      _library._tcsetpgrp_ptr;
}

abstract class EPOLL_EVENTS {
  static const int EPOLLIN = 1;
  static const int EPOLLPRI = 2;
  static const int EPOLLOUT = 4;
  static const int EPOLLRDNORM = 64;
  static const int EPOLLRDBAND = 128;
  static const int EPOLLWRNORM = 256;
  static const int EPOLLWRBAND = 512;
  static const int EPOLLMSG = 1024;
  static const int EPOLLERR = 8;
  static const int EPOLLHUP = 16;
  static const int EPOLLRDHUP = 8192;
  static const int EPOLLEXCLUSIVE = 268435456;
  static const int EPOLLWAKEUP = 536870912;
  static const int EPOLLONESHOT = 1073741824;
  static const int EPOLLET = -2147483648;
}

// class epoll_event extends ffi.Opaque {}

class iovec extends ffi.Struct {
  external ffi.Pointer<ffi.Void> iov_base;

  @ffi.Uint32()
  external int iov_len;
}

abstract class socket_type {
  static const int SOCK_STREAM = 1;
  static const int SOCK_DGRAM = 2;
  static const int SOCK_RAW = 3;
  static const int SOCK_RDM = 4;
  static const int SOCK_SEQPACKET = 5;
  static const int SOCK_DCCP = 6;
  static const int SOCK_PACKET = 10;
  static const int SOCK_CLOEXEC = 524288;
  static const int SOCK_NONBLOCK = 2048;
}

class sockaddr_storage extends ffi.Struct {
  @ffi.Uint16()
  external int ss_family;

  @ffi.Uint8()
  external int _unique___ss_padding_item_0;
  @ffi.Uint8()
  external int _unique___ss_padding_item_1;
  @ffi.Uint8()
  external int _unique___ss_padding_item_2;
  @ffi.Uint8()
  external int _unique___ss_padding_item_3;
  @ffi.Uint8()
  external int _unique___ss_padding_item_4;
  @ffi.Uint8()
  external int _unique___ss_padding_item_5;
  @ffi.Uint8()
  external int _unique___ss_padding_item_6;
  @ffi.Uint8()
  external int _unique___ss_padding_item_7;
  @ffi.Uint8()
  external int _unique___ss_padding_item_8;
  @ffi.Uint8()
  external int _unique___ss_padding_item_9;
  @ffi.Uint8()
  external int _unique___ss_padding_item_10;
  @ffi.Uint8()
  external int _unique___ss_padding_item_11;
  @ffi.Uint8()
  external int _unique___ss_padding_item_12;
  @ffi.Uint8()
  external int _unique___ss_padding_item_13;
  @ffi.Uint8()
  external int _unique___ss_padding_item_14;
  @ffi.Uint8()
  external int _unique___ss_padding_item_15;
  @ffi.Uint8()
  external int _unique___ss_padding_item_16;
  @ffi.Uint8()
  external int _unique___ss_padding_item_17;
  @ffi.Uint8()
  external int _unique___ss_padding_item_18;
  @ffi.Uint8()
  external int _unique___ss_padding_item_19;
  @ffi.Uint8()
  external int _unique___ss_padding_item_20;
  @ffi.Uint8()
  external int _unique___ss_padding_item_21;
  @ffi.Uint8()
  external int _unique___ss_padding_item_22;
  @ffi.Uint8()
  external int _unique___ss_padding_item_23;
  @ffi.Uint8()
  external int _unique___ss_padding_item_24;
  @ffi.Uint8()
  external int _unique___ss_padding_item_25;
  @ffi.Uint8()
  external int _unique___ss_padding_item_26;
  @ffi.Uint8()
  external int _unique___ss_padding_item_27;
  @ffi.Uint8()
  external int _unique___ss_padding_item_28;
  @ffi.Uint8()
  external int _unique___ss_padding_item_29;
  @ffi.Uint8()
  external int _unique___ss_padding_item_30;
  @ffi.Uint8()
  external int _unique___ss_padding_item_31;
  @ffi.Uint8()
  external int _unique___ss_padding_item_32;
  @ffi.Uint8()
  external int _unique___ss_padding_item_33;
  @ffi.Uint8()
  external int _unique___ss_padding_item_34;
  @ffi.Uint8()
  external int _unique___ss_padding_item_35;
  @ffi.Uint8()
  external int _unique___ss_padding_item_36;
  @ffi.Uint8()
  external int _unique___ss_padding_item_37;
  @ffi.Uint8()
  external int _unique___ss_padding_item_38;
  @ffi.Uint8()
  external int _unique___ss_padding_item_39;
  @ffi.Uint8()
  external int _unique___ss_padding_item_40;
  @ffi.Uint8()
  external int _unique___ss_padding_item_41;
  @ffi.Uint8()
  external int _unique___ss_padding_item_42;
  @ffi.Uint8()
  external int _unique___ss_padding_item_43;
  @ffi.Uint8()
  external int _unique___ss_padding_item_44;
  @ffi.Uint8()
  external int _unique___ss_padding_item_45;
  @ffi.Uint8()
  external int _unique___ss_padding_item_46;
  @ffi.Uint8()
  external int _unique___ss_padding_item_47;
  @ffi.Uint8()
  external int _unique___ss_padding_item_48;
  @ffi.Uint8()
  external int _unique___ss_padding_item_49;
  @ffi.Uint8()
  external int _unique___ss_padding_item_50;
  @ffi.Uint8()
  external int _unique___ss_padding_item_51;
  @ffi.Uint8()
  external int _unique___ss_padding_item_52;
  @ffi.Uint8()
  external int _unique___ss_padding_item_53;
  @ffi.Uint8()
  external int _unique___ss_padding_item_54;
  @ffi.Uint8()
  external int _unique___ss_padding_item_55;
  @ffi.Uint8()
  external int _unique___ss_padding_item_56;
  @ffi.Uint8()
  external int _unique___ss_padding_item_57;
  @ffi.Uint8()
  external int _unique___ss_padding_item_58;
  @ffi.Uint8()
  external int _unique___ss_padding_item_59;
  @ffi.Uint8()
  external int _unique___ss_padding_item_60;
  @ffi.Uint8()
  external int _unique___ss_padding_item_61;
  @ffi.Uint8()
  external int _unique___ss_padding_item_62;
  @ffi.Uint8()
  external int _unique___ss_padding_item_63;
  @ffi.Uint8()
  external int _unique___ss_padding_item_64;
  @ffi.Uint8()
  external int _unique___ss_padding_item_65;
  @ffi.Uint8()
  external int _unique___ss_padding_item_66;
  @ffi.Uint8()
  external int _unique___ss_padding_item_67;
  @ffi.Uint8()
  external int _unique___ss_padding_item_68;
  @ffi.Uint8()
  external int _unique___ss_padding_item_69;
  @ffi.Uint8()
  external int _unique___ss_padding_item_70;
  @ffi.Uint8()
  external int _unique___ss_padding_item_71;
  @ffi.Uint8()
  external int _unique___ss_padding_item_72;
  @ffi.Uint8()
  external int _unique___ss_padding_item_73;
  @ffi.Uint8()
  external int _unique___ss_padding_item_74;
  @ffi.Uint8()
  external int _unique___ss_padding_item_75;
  @ffi.Uint8()
  external int _unique___ss_padding_item_76;
  @ffi.Uint8()
  external int _unique___ss_padding_item_77;
  @ffi.Uint8()
  external int _unique___ss_padding_item_78;
  @ffi.Uint8()
  external int _unique___ss_padding_item_79;
  @ffi.Uint8()
  external int _unique___ss_padding_item_80;
  @ffi.Uint8()
  external int _unique___ss_padding_item_81;
  @ffi.Uint8()
  external int _unique___ss_padding_item_82;
  @ffi.Uint8()
  external int _unique___ss_padding_item_83;
  @ffi.Uint8()
  external int _unique___ss_padding_item_84;
  @ffi.Uint8()
  external int _unique___ss_padding_item_85;
  @ffi.Uint8()
  external int _unique___ss_padding_item_86;
  @ffi.Uint8()
  external int _unique___ss_padding_item_87;
  @ffi.Uint8()
  external int _unique___ss_padding_item_88;
  @ffi.Uint8()
  external int _unique___ss_padding_item_89;
  @ffi.Uint8()
  external int _unique___ss_padding_item_90;
  @ffi.Uint8()
  external int _unique___ss_padding_item_91;
  @ffi.Uint8()
  external int _unique___ss_padding_item_92;
  @ffi.Uint8()
  external int _unique___ss_padding_item_93;
  @ffi.Uint8()
  external int _unique___ss_padding_item_94;
  @ffi.Uint8()
  external int _unique___ss_padding_item_95;
  @ffi.Uint8()
  external int _unique___ss_padding_item_96;
  @ffi.Uint8()
  external int _unique___ss_padding_item_97;
  @ffi.Uint8()
  external int _unique___ss_padding_item_98;
  @ffi.Uint8()
  external int _unique___ss_padding_item_99;
  @ffi.Uint8()
  external int _unique___ss_padding_item_100;
  @ffi.Uint8()
  external int _unique___ss_padding_item_101;
  @ffi.Uint8()
  external int _unique___ss_padding_item_102;
  @ffi.Uint8()
  external int _unique___ss_padding_item_103;
  @ffi.Uint8()
  external int _unique___ss_padding_item_104;
  @ffi.Uint8()
  external int _unique___ss_padding_item_105;
  @ffi.Uint8()
  external int _unique___ss_padding_item_106;
  @ffi.Uint8()
  external int _unique___ss_padding_item_107;
  @ffi.Uint8()
  external int _unique___ss_padding_item_108;
  @ffi.Uint8()
  external int _unique___ss_padding_item_109;
  @ffi.Uint8()
  external int _unique___ss_padding_item_110;
  @ffi.Uint8()
  external int _unique___ss_padding_item_111;
  @ffi.Uint8()
  external int _unique___ss_padding_item_112;
  @ffi.Uint8()
  external int _unique___ss_padding_item_113;
  @ffi.Uint8()
  external int _unique___ss_padding_item_114;
  @ffi.Uint8()
  external int _unique___ss_padding_item_115;
  @ffi.Uint8()
  external int _unique___ss_padding_item_116;
  @ffi.Uint8()
  external int _unique___ss_padding_item_117;
  @ffi.Uint8()
  external int _unique___ss_padding_item_118;
  @ffi.Uint8()
  external int _unique___ss_padding_item_119;
  @ffi.Uint8()
  external int _unique___ss_padding_item_120;
  @ffi.Uint8()
  external int _unique___ss_padding_item_121;

  /// Helper for array `__ss_padding`.
  ArrayHelper_sockaddr_storage___ss_padding_level0 get __ss_padding =>
      ArrayHelper_sockaddr_storage___ss_padding_level0(this, [122], 0, 0);
  @ffi.Uint32()
  external int __ss_align;
}

/// Helper for array `__ss_padding` in struct `sockaddr_storage`.
class ArrayHelper_sockaddr_storage___ss_padding_level0 {
  final sockaddr_storage _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_sockaddr_storage___ss_padding_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique___ss_padding_item_0;
      case 1:
        return _struct._unique___ss_padding_item_1;
      case 2:
        return _struct._unique___ss_padding_item_2;
      case 3:
        return _struct._unique___ss_padding_item_3;
      case 4:
        return _struct._unique___ss_padding_item_4;
      case 5:
        return _struct._unique___ss_padding_item_5;
      case 6:
        return _struct._unique___ss_padding_item_6;
      case 7:
        return _struct._unique___ss_padding_item_7;
      case 8:
        return _struct._unique___ss_padding_item_8;
      case 9:
        return _struct._unique___ss_padding_item_9;
      case 10:
        return _struct._unique___ss_padding_item_10;
      case 11:
        return _struct._unique___ss_padding_item_11;
      case 12:
        return _struct._unique___ss_padding_item_12;
      case 13:
        return _struct._unique___ss_padding_item_13;
      case 14:
        return _struct._unique___ss_padding_item_14;
      case 15:
        return _struct._unique___ss_padding_item_15;
      case 16:
        return _struct._unique___ss_padding_item_16;
      case 17:
        return _struct._unique___ss_padding_item_17;
      case 18:
        return _struct._unique___ss_padding_item_18;
      case 19:
        return _struct._unique___ss_padding_item_19;
      case 20:
        return _struct._unique___ss_padding_item_20;
      case 21:
        return _struct._unique___ss_padding_item_21;
      case 22:
        return _struct._unique___ss_padding_item_22;
      case 23:
        return _struct._unique___ss_padding_item_23;
      case 24:
        return _struct._unique___ss_padding_item_24;
      case 25:
        return _struct._unique___ss_padding_item_25;
      case 26:
        return _struct._unique___ss_padding_item_26;
      case 27:
        return _struct._unique___ss_padding_item_27;
      case 28:
        return _struct._unique___ss_padding_item_28;
      case 29:
        return _struct._unique___ss_padding_item_29;
      case 30:
        return _struct._unique___ss_padding_item_30;
      case 31:
        return _struct._unique___ss_padding_item_31;
      case 32:
        return _struct._unique___ss_padding_item_32;
      case 33:
        return _struct._unique___ss_padding_item_33;
      case 34:
        return _struct._unique___ss_padding_item_34;
      case 35:
        return _struct._unique___ss_padding_item_35;
      case 36:
        return _struct._unique___ss_padding_item_36;
      case 37:
        return _struct._unique___ss_padding_item_37;
      case 38:
        return _struct._unique___ss_padding_item_38;
      case 39:
        return _struct._unique___ss_padding_item_39;
      case 40:
        return _struct._unique___ss_padding_item_40;
      case 41:
        return _struct._unique___ss_padding_item_41;
      case 42:
        return _struct._unique___ss_padding_item_42;
      case 43:
        return _struct._unique___ss_padding_item_43;
      case 44:
        return _struct._unique___ss_padding_item_44;
      case 45:
        return _struct._unique___ss_padding_item_45;
      case 46:
        return _struct._unique___ss_padding_item_46;
      case 47:
        return _struct._unique___ss_padding_item_47;
      case 48:
        return _struct._unique___ss_padding_item_48;
      case 49:
        return _struct._unique___ss_padding_item_49;
      case 50:
        return _struct._unique___ss_padding_item_50;
      case 51:
        return _struct._unique___ss_padding_item_51;
      case 52:
        return _struct._unique___ss_padding_item_52;
      case 53:
        return _struct._unique___ss_padding_item_53;
      case 54:
        return _struct._unique___ss_padding_item_54;
      case 55:
        return _struct._unique___ss_padding_item_55;
      case 56:
        return _struct._unique___ss_padding_item_56;
      case 57:
        return _struct._unique___ss_padding_item_57;
      case 58:
        return _struct._unique___ss_padding_item_58;
      case 59:
        return _struct._unique___ss_padding_item_59;
      case 60:
        return _struct._unique___ss_padding_item_60;
      case 61:
        return _struct._unique___ss_padding_item_61;
      case 62:
        return _struct._unique___ss_padding_item_62;
      case 63:
        return _struct._unique___ss_padding_item_63;
      case 64:
        return _struct._unique___ss_padding_item_64;
      case 65:
        return _struct._unique___ss_padding_item_65;
      case 66:
        return _struct._unique___ss_padding_item_66;
      case 67:
        return _struct._unique___ss_padding_item_67;
      case 68:
        return _struct._unique___ss_padding_item_68;
      case 69:
        return _struct._unique___ss_padding_item_69;
      case 70:
        return _struct._unique___ss_padding_item_70;
      case 71:
        return _struct._unique___ss_padding_item_71;
      case 72:
        return _struct._unique___ss_padding_item_72;
      case 73:
        return _struct._unique___ss_padding_item_73;
      case 74:
        return _struct._unique___ss_padding_item_74;
      case 75:
        return _struct._unique___ss_padding_item_75;
      case 76:
        return _struct._unique___ss_padding_item_76;
      case 77:
        return _struct._unique___ss_padding_item_77;
      case 78:
        return _struct._unique___ss_padding_item_78;
      case 79:
        return _struct._unique___ss_padding_item_79;
      case 80:
        return _struct._unique___ss_padding_item_80;
      case 81:
        return _struct._unique___ss_padding_item_81;
      case 82:
        return _struct._unique___ss_padding_item_82;
      case 83:
        return _struct._unique___ss_padding_item_83;
      case 84:
        return _struct._unique___ss_padding_item_84;
      case 85:
        return _struct._unique___ss_padding_item_85;
      case 86:
        return _struct._unique___ss_padding_item_86;
      case 87:
        return _struct._unique___ss_padding_item_87;
      case 88:
        return _struct._unique___ss_padding_item_88;
      case 89:
        return _struct._unique___ss_padding_item_89;
      case 90:
        return _struct._unique___ss_padding_item_90;
      case 91:
        return _struct._unique___ss_padding_item_91;
      case 92:
        return _struct._unique___ss_padding_item_92;
      case 93:
        return _struct._unique___ss_padding_item_93;
      case 94:
        return _struct._unique___ss_padding_item_94;
      case 95:
        return _struct._unique___ss_padding_item_95;
      case 96:
        return _struct._unique___ss_padding_item_96;
      case 97:
        return _struct._unique___ss_padding_item_97;
      case 98:
        return _struct._unique___ss_padding_item_98;
      case 99:
        return _struct._unique___ss_padding_item_99;
      case 100:
        return _struct._unique___ss_padding_item_100;
      case 101:
        return _struct._unique___ss_padding_item_101;
      case 102:
        return _struct._unique___ss_padding_item_102;
      case 103:
        return _struct._unique___ss_padding_item_103;
      case 104:
        return _struct._unique___ss_padding_item_104;
      case 105:
        return _struct._unique___ss_padding_item_105;
      case 106:
        return _struct._unique___ss_padding_item_106;
      case 107:
        return _struct._unique___ss_padding_item_107;
      case 108:
        return _struct._unique___ss_padding_item_108;
      case 109:
        return _struct._unique___ss_padding_item_109;
      case 110:
        return _struct._unique___ss_padding_item_110;
      case 111:
        return _struct._unique___ss_padding_item_111;
      case 112:
        return _struct._unique___ss_padding_item_112;
      case 113:
        return _struct._unique___ss_padding_item_113;
      case 114:
        return _struct._unique___ss_padding_item_114;
      case 115:
        return _struct._unique___ss_padding_item_115;
      case 116:
        return _struct._unique___ss_padding_item_116;
      case 117:
        return _struct._unique___ss_padding_item_117;
      case 118:
        return _struct._unique___ss_padding_item_118;
      case 119:
        return _struct._unique___ss_padding_item_119;
      case 120:
        return _struct._unique___ss_padding_item_120;
      case 121:
        return _struct._unique___ss_padding_item_121;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique___ss_padding_item_0 = value;
        break;
      case 1:
        _struct._unique___ss_padding_item_1 = value;
        break;
      case 2:
        _struct._unique___ss_padding_item_2 = value;
        break;
      case 3:
        _struct._unique___ss_padding_item_3 = value;
        break;
      case 4:
        _struct._unique___ss_padding_item_4 = value;
        break;
      case 5:
        _struct._unique___ss_padding_item_5 = value;
        break;
      case 6:
        _struct._unique___ss_padding_item_6 = value;
        break;
      case 7:
        _struct._unique___ss_padding_item_7 = value;
        break;
      case 8:
        _struct._unique___ss_padding_item_8 = value;
        break;
      case 9:
        _struct._unique___ss_padding_item_9 = value;
        break;
      case 10:
        _struct._unique___ss_padding_item_10 = value;
        break;
      case 11:
        _struct._unique___ss_padding_item_11 = value;
        break;
      case 12:
        _struct._unique___ss_padding_item_12 = value;
        break;
      case 13:
        _struct._unique___ss_padding_item_13 = value;
        break;
      case 14:
        _struct._unique___ss_padding_item_14 = value;
        break;
      case 15:
        _struct._unique___ss_padding_item_15 = value;
        break;
      case 16:
        _struct._unique___ss_padding_item_16 = value;
        break;
      case 17:
        _struct._unique___ss_padding_item_17 = value;
        break;
      case 18:
        _struct._unique___ss_padding_item_18 = value;
        break;
      case 19:
        _struct._unique___ss_padding_item_19 = value;
        break;
      case 20:
        _struct._unique___ss_padding_item_20 = value;
        break;
      case 21:
        _struct._unique___ss_padding_item_21 = value;
        break;
      case 22:
        _struct._unique___ss_padding_item_22 = value;
        break;
      case 23:
        _struct._unique___ss_padding_item_23 = value;
        break;
      case 24:
        _struct._unique___ss_padding_item_24 = value;
        break;
      case 25:
        _struct._unique___ss_padding_item_25 = value;
        break;
      case 26:
        _struct._unique___ss_padding_item_26 = value;
        break;
      case 27:
        _struct._unique___ss_padding_item_27 = value;
        break;
      case 28:
        _struct._unique___ss_padding_item_28 = value;
        break;
      case 29:
        _struct._unique___ss_padding_item_29 = value;
        break;
      case 30:
        _struct._unique___ss_padding_item_30 = value;
        break;
      case 31:
        _struct._unique___ss_padding_item_31 = value;
        break;
      case 32:
        _struct._unique___ss_padding_item_32 = value;
        break;
      case 33:
        _struct._unique___ss_padding_item_33 = value;
        break;
      case 34:
        _struct._unique___ss_padding_item_34 = value;
        break;
      case 35:
        _struct._unique___ss_padding_item_35 = value;
        break;
      case 36:
        _struct._unique___ss_padding_item_36 = value;
        break;
      case 37:
        _struct._unique___ss_padding_item_37 = value;
        break;
      case 38:
        _struct._unique___ss_padding_item_38 = value;
        break;
      case 39:
        _struct._unique___ss_padding_item_39 = value;
        break;
      case 40:
        _struct._unique___ss_padding_item_40 = value;
        break;
      case 41:
        _struct._unique___ss_padding_item_41 = value;
        break;
      case 42:
        _struct._unique___ss_padding_item_42 = value;
        break;
      case 43:
        _struct._unique___ss_padding_item_43 = value;
        break;
      case 44:
        _struct._unique___ss_padding_item_44 = value;
        break;
      case 45:
        _struct._unique___ss_padding_item_45 = value;
        break;
      case 46:
        _struct._unique___ss_padding_item_46 = value;
        break;
      case 47:
        _struct._unique___ss_padding_item_47 = value;
        break;
      case 48:
        _struct._unique___ss_padding_item_48 = value;
        break;
      case 49:
        _struct._unique___ss_padding_item_49 = value;
        break;
      case 50:
        _struct._unique___ss_padding_item_50 = value;
        break;
      case 51:
        _struct._unique___ss_padding_item_51 = value;
        break;
      case 52:
        _struct._unique___ss_padding_item_52 = value;
        break;
      case 53:
        _struct._unique___ss_padding_item_53 = value;
        break;
      case 54:
        _struct._unique___ss_padding_item_54 = value;
        break;
      case 55:
        _struct._unique___ss_padding_item_55 = value;
        break;
      case 56:
        _struct._unique___ss_padding_item_56 = value;
        break;
      case 57:
        _struct._unique___ss_padding_item_57 = value;
        break;
      case 58:
        _struct._unique___ss_padding_item_58 = value;
        break;
      case 59:
        _struct._unique___ss_padding_item_59 = value;
        break;
      case 60:
        _struct._unique___ss_padding_item_60 = value;
        break;
      case 61:
        _struct._unique___ss_padding_item_61 = value;
        break;
      case 62:
        _struct._unique___ss_padding_item_62 = value;
        break;
      case 63:
        _struct._unique___ss_padding_item_63 = value;
        break;
      case 64:
        _struct._unique___ss_padding_item_64 = value;
        break;
      case 65:
        _struct._unique___ss_padding_item_65 = value;
        break;
      case 66:
        _struct._unique___ss_padding_item_66 = value;
        break;
      case 67:
        _struct._unique___ss_padding_item_67 = value;
        break;
      case 68:
        _struct._unique___ss_padding_item_68 = value;
        break;
      case 69:
        _struct._unique___ss_padding_item_69 = value;
        break;
      case 70:
        _struct._unique___ss_padding_item_70 = value;
        break;
      case 71:
        _struct._unique___ss_padding_item_71 = value;
        break;
      case 72:
        _struct._unique___ss_padding_item_72 = value;
        break;
      case 73:
        _struct._unique___ss_padding_item_73 = value;
        break;
      case 74:
        _struct._unique___ss_padding_item_74 = value;
        break;
      case 75:
        _struct._unique___ss_padding_item_75 = value;
        break;
      case 76:
        _struct._unique___ss_padding_item_76 = value;
        break;
      case 77:
        _struct._unique___ss_padding_item_77 = value;
        break;
      case 78:
        _struct._unique___ss_padding_item_78 = value;
        break;
      case 79:
        _struct._unique___ss_padding_item_79 = value;
        break;
      case 80:
        _struct._unique___ss_padding_item_80 = value;
        break;
      case 81:
        _struct._unique___ss_padding_item_81 = value;
        break;
      case 82:
        _struct._unique___ss_padding_item_82 = value;
        break;
      case 83:
        _struct._unique___ss_padding_item_83 = value;
        break;
      case 84:
        _struct._unique___ss_padding_item_84 = value;
        break;
      case 85:
        _struct._unique___ss_padding_item_85 = value;
        break;
      case 86:
        _struct._unique___ss_padding_item_86 = value;
        break;
      case 87:
        _struct._unique___ss_padding_item_87 = value;
        break;
      case 88:
        _struct._unique___ss_padding_item_88 = value;
        break;
      case 89:
        _struct._unique___ss_padding_item_89 = value;
        break;
      case 90:
        _struct._unique___ss_padding_item_90 = value;
        break;
      case 91:
        _struct._unique___ss_padding_item_91 = value;
        break;
      case 92:
        _struct._unique___ss_padding_item_92 = value;
        break;
      case 93:
        _struct._unique___ss_padding_item_93 = value;
        break;
      case 94:
        _struct._unique___ss_padding_item_94 = value;
        break;
      case 95:
        _struct._unique___ss_padding_item_95 = value;
        break;
      case 96:
        _struct._unique___ss_padding_item_96 = value;
        break;
      case 97:
        _struct._unique___ss_padding_item_97 = value;
        break;
      case 98:
        _struct._unique___ss_padding_item_98 = value;
        break;
      case 99:
        _struct._unique___ss_padding_item_99 = value;
        break;
      case 100:
        _struct._unique___ss_padding_item_100 = value;
        break;
      case 101:
        _struct._unique___ss_padding_item_101 = value;
        break;
      case 102:
        _struct._unique___ss_padding_item_102 = value;
        break;
      case 103:
        _struct._unique___ss_padding_item_103 = value;
        break;
      case 104:
        _struct._unique___ss_padding_item_104 = value;
        break;
      case 105:
        _struct._unique___ss_padding_item_105 = value;
        break;
      case 106:
        _struct._unique___ss_padding_item_106 = value;
        break;
      case 107:
        _struct._unique___ss_padding_item_107 = value;
        break;
      case 108:
        _struct._unique___ss_padding_item_108 = value;
        break;
      case 109:
        _struct._unique___ss_padding_item_109 = value;
        break;
      case 110:
        _struct._unique___ss_padding_item_110 = value;
        break;
      case 111:
        _struct._unique___ss_padding_item_111 = value;
        break;
      case 112:
        _struct._unique___ss_padding_item_112 = value;
        break;
      case 113:
        _struct._unique___ss_padding_item_113 = value;
        break;
      case 114:
        _struct._unique___ss_padding_item_114 = value;
        break;
      case 115:
        _struct._unique___ss_padding_item_115 = value;
        break;
      case 116:
        _struct._unique___ss_padding_item_116 = value;
        break;
      case 117:
        _struct._unique___ss_padding_item_117 = value;
        break;
      case 118:
        _struct._unique___ss_padding_item_118 = value;
        break;
      case 119:
        _struct._unique___ss_padding_item_119 = value;
        break;
      case 120:
        _struct._unique___ss_padding_item_120 = value;
        break;
      case 121:
        _struct._unique___ss_padding_item_121 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class msghdr extends ffi.Struct {
  external ffi.Pointer<ffi.Void> msg_name;

  @ffi.Uint32()
  external int msg_namelen;

  external ffi.Pointer<iovec> msg_iov;

  @ffi.Uint32()
  external int msg_iovlen;

  external ffi.Pointer<ffi.Void> msg_control;

  @ffi.Uint32()
  external int msg_controllen;

  @ffi.Int32()
  external int msg_flags;
}

class cmsghdr extends ffi.Opaque {}

class linger extends ffi.Struct {
  @ffi.Int32()
  external int l_onoff;

  @ffi.Int32()
  external int l_linger;
}

class if_nameindex extends ffi.Struct {
  @ffi.Uint32()
  external int if_index;

  external ffi.Pointer<ffi.Uint8> if_name;
}

class iface extends ffi.Opaque {}

class ifaddr extends ffi.Opaque {}

class ifmap extends ffi.Struct {
  @ffi.Uint32()
  external int mem_start;

  @ffi.Uint32()
  external int mem_end;

  @ffi.Uint16()
  external int base_addr;

  @ffi.Uint8()
  external int irq;

  @ffi.Uint8()
  external int dma;

  @ffi.Uint8()
  external int port;
}

// class ifreq extends ffi.Opaque {}

class ifconf extends ffi.Opaque {}

/// struct can_frame - basic CAN frame structure
/// @can_id:  CAN ID of the frame and CAN_*_FLAG flags, see canid_t definition
/// @can_dlc: frame payload length in byte (0 .. 8) aka data length code
/// N.B. the DLC field from ISO 11898-1 Chapter 8.4.2.3 has a 1:1
/// mapping of the 'data length code' to the real payload length
/// @__pad:   padding
/// @__res0:  reserved / padding
/// @__res1:  reserved / padding
/// @data:    CAN frame payload (up to 8 byte)
class can_frame extends ffi.Struct {
  @ffi.Uint32()
  external int can_id;

  @ffi.Uint8()
  external int can_dlc;

  @ffi.Uint8()
  external int __pad;

  @ffi.Uint8()
  external int __res0;

  @ffi.Uint8()
  external int __res1;

  @ffi.Uint8()
  external int _unique_data_item_0;
  @ffi.Uint8()
  external int _unique_data_item_1;
  @ffi.Uint8()
  external int _unique_data_item_2;
  @ffi.Uint8()
  external int _unique_data_item_3;
  @ffi.Uint8()
  external int _unique_data_item_4;
  @ffi.Uint8()
  external int _unique_data_item_5;
  @ffi.Uint8()
  external int _unique_data_item_6;
  @ffi.Uint8()
  external int _unique_data_item_7;

  /// Helper for array `data`.
  ArrayHelper_can_frame_data_level0 get data =>
      ArrayHelper_can_frame_data_level0(this, [8], 0, 0);
}

/// Helper for array `data` in struct `can_frame`.
class ArrayHelper_can_frame_data_level0 {
  final can_frame _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_can_frame_data_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_data_item_0;
      case 1:
        return _struct._unique_data_item_1;
      case 2:
        return _struct._unique_data_item_2;
      case 3:
        return _struct._unique_data_item_3;
      case 4:
        return _struct._unique_data_item_4;
      case 5:
        return _struct._unique_data_item_5;
      case 6:
        return _struct._unique_data_item_6;
      case 7:
        return _struct._unique_data_item_7;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_data_item_0 = value;
        break;
      case 1:
        _struct._unique_data_item_1 = value;
        break;
      case 2:
        _struct._unique_data_item_2 = value;
        break;
      case 3:
        _struct._unique_data_item_3 = value;
        break;
      case 4:
        _struct._unique_data_item_4 = value;
        break;
      case 5:
        _struct._unique_data_item_5 = value;
        break;
      case 6:
        _struct._unique_data_item_6 = value;
        break;
      case 7:
        _struct._unique_data_item_7 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// struct canfd_frame - CAN flexible data rate frame structure
/// @can_id: CAN ID of the frame and CAN_*_FLAG flags, see canid_t definition
/// @len:    frame payload length in byte (0 .. CANFD_MAX_DLEN)
/// @flags:  additional flags for CAN FD
/// @__res0: reserved / padding
/// @__res1: reserved / padding
/// @data:   CAN FD frame payload (up to CANFD_MAX_DLEN byte)
class canfd_frame extends ffi.Struct {
  @ffi.Uint32()
  external int can_id;

  @ffi.Uint8()
  external int len;

  @ffi.Uint8()
  external int flags;

  @ffi.Uint8()
  external int __res0;

  @ffi.Uint8()
  external int __res1;

  @ffi.Uint8()
  external int _unique_data_item_0;
  @ffi.Uint8()
  external int _unique_data_item_1;
  @ffi.Uint8()
  external int _unique_data_item_2;
  @ffi.Uint8()
  external int _unique_data_item_3;
  @ffi.Uint8()
  external int _unique_data_item_4;
  @ffi.Uint8()
  external int _unique_data_item_5;
  @ffi.Uint8()
  external int _unique_data_item_6;
  @ffi.Uint8()
  external int _unique_data_item_7;
  @ffi.Uint8()
  external int _unique_data_item_8;
  @ffi.Uint8()
  external int _unique_data_item_9;
  @ffi.Uint8()
  external int _unique_data_item_10;
  @ffi.Uint8()
  external int _unique_data_item_11;
  @ffi.Uint8()
  external int _unique_data_item_12;
  @ffi.Uint8()
  external int _unique_data_item_13;
  @ffi.Uint8()
  external int _unique_data_item_14;
  @ffi.Uint8()
  external int _unique_data_item_15;
  @ffi.Uint8()
  external int _unique_data_item_16;
  @ffi.Uint8()
  external int _unique_data_item_17;
  @ffi.Uint8()
  external int _unique_data_item_18;
  @ffi.Uint8()
  external int _unique_data_item_19;
  @ffi.Uint8()
  external int _unique_data_item_20;
  @ffi.Uint8()
  external int _unique_data_item_21;
  @ffi.Uint8()
  external int _unique_data_item_22;
  @ffi.Uint8()
  external int _unique_data_item_23;
  @ffi.Uint8()
  external int _unique_data_item_24;
  @ffi.Uint8()
  external int _unique_data_item_25;
  @ffi.Uint8()
  external int _unique_data_item_26;
  @ffi.Uint8()
  external int _unique_data_item_27;
  @ffi.Uint8()
  external int _unique_data_item_28;
  @ffi.Uint8()
  external int _unique_data_item_29;
  @ffi.Uint8()
  external int _unique_data_item_30;
  @ffi.Uint8()
  external int _unique_data_item_31;
  @ffi.Uint8()
  external int _unique_data_item_32;
  @ffi.Uint8()
  external int _unique_data_item_33;
  @ffi.Uint8()
  external int _unique_data_item_34;
  @ffi.Uint8()
  external int _unique_data_item_35;
  @ffi.Uint8()
  external int _unique_data_item_36;
  @ffi.Uint8()
  external int _unique_data_item_37;
  @ffi.Uint8()
  external int _unique_data_item_38;
  @ffi.Uint8()
  external int _unique_data_item_39;
  @ffi.Uint8()
  external int _unique_data_item_40;
  @ffi.Uint8()
  external int _unique_data_item_41;
  @ffi.Uint8()
  external int _unique_data_item_42;
  @ffi.Uint8()
  external int _unique_data_item_43;
  @ffi.Uint8()
  external int _unique_data_item_44;
  @ffi.Uint8()
  external int _unique_data_item_45;
  @ffi.Uint8()
  external int _unique_data_item_46;
  @ffi.Uint8()
  external int _unique_data_item_47;
  @ffi.Uint8()
  external int _unique_data_item_48;
  @ffi.Uint8()
  external int _unique_data_item_49;
  @ffi.Uint8()
  external int _unique_data_item_50;
  @ffi.Uint8()
  external int _unique_data_item_51;
  @ffi.Uint8()
  external int _unique_data_item_52;
  @ffi.Uint8()
  external int _unique_data_item_53;
  @ffi.Uint8()
  external int _unique_data_item_54;
  @ffi.Uint8()
  external int _unique_data_item_55;
  @ffi.Uint8()
  external int _unique_data_item_56;
  @ffi.Uint8()
  external int _unique_data_item_57;
  @ffi.Uint8()
  external int _unique_data_item_58;
  @ffi.Uint8()
  external int _unique_data_item_59;
  @ffi.Uint8()
  external int _unique_data_item_60;
  @ffi.Uint8()
  external int _unique_data_item_61;
  @ffi.Uint8()
  external int _unique_data_item_62;
  @ffi.Uint8()
  external int _unique_data_item_63;

  /// Helper for array `data`.
  ArrayHelper_canfd_frame_data_level0 get data =>
      ArrayHelper_canfd_frame_data_level0(this, [64], 0, 0);
}

/// Helper for array `data` in struct `canfd_frame`.
class ArrayHelper_canfd_frame_data_level0 {
  final canfd_frame _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_canfd_frame_data_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_data_item_0;
      case 1:
        return _struct._unique_data_item_1;
      case 2:
        return _struct._unique_data_item_2;
      case 3:
        return _struct._unique_data_item_3;
      case 4:
        return _struct._unique_data_item_4;
      case 5:
        return _struct._unique_data_item_5;
      case 6:
        return _struct._unique_data_item_6;
      case 7:
        return _struct._unique_data_item_7;
      case 8:
        return _struct._unique_data_item_8;
      case 9:
        return _struct._unique_data_item_9;
      case 10:
        return _struct._unique_data_item_10;
      case 11:
        return _struct._unique_data_item_11;
      case 12:
        return _struct._unique_data_item_12;
      case 13:
        return _struct._unique_data_item_13;
      case 14:
        return _struct._unique_data_item_14;
      case 15:
        return _struct._unique_data_item_15;
      case 16:
        return _struct._unique_data_item_16;
      case 17:
        return _struct._unique_data_item_17;
      case 18:
        return _struct._unique_data_item_18;
      case 19:
        return _struct._unique_data_item_19;
      case 20:
        return _struct._unique_data_item_20;
      case 21:
        return _struct._unique_data_item_21;
      case 22:
        return _struct._unique_data_item_22;
      case 23:
        return _struct._unique_data_item_23;
      case 24:
        return _struct._unique_data_item_24;
      case 25:
        return _struct._unique_data_item_25;
      case 26:
        return _struct._unique_data_item_26;
      case 27:
        return _struct._unique_data_item_27;
      case 28:
        return _struct._unique_data_item_28;
      case 29:
        return _struct._unique_data_item_29;
      case 30:
        return _struct._unique_data_item_30;
      case 31:
        return _struct._unique_data_item_31;
      case 32:
        return _struct._unique_data_item_32;
      case 33:
        return _struct._unique_data_item_33;
      case 34:
        return _struct._unique_data_item_34;
      case 35:
        return _struct._unique_data_item_35;
      case 36:
        return _struct._unique_data_item_36;
      case 37:
        return _struct._unique_data_item_37;
      case 38:
        return _struct._unique_data_item_38;
      case 39:
        return _struct._unique_data_item_39;
      case 40:
        return _struct._unique_data_item_40;
      case 41:
        return _struct._unique_data_item_41;
      case 42:
        return _struct._unique_data_item_42;
      case 43:
        return _struct._unique_data_item_43;
      case 44:
        return _struct._unique_data_item_44;
      case 45:
        return _struct._unique_data_item_45;
      case 46:
        return _struct._unique_data_item_46;
      case 47:
        return _struct._unique_data_item_47;
      case 48:
        return _struct._unique_data_item_48;
      case 49:
        return _struct._unique_data_item_49;
      case 50:
        return _struct._unique_data_item_50;
      case 51:
        return _struct._unique_data_item_51;
      case 52:
        return _struct._unique_data_item_52;
      case 53:
        return _struct._unique_data_item_53;
      case 54:
        return _struct._unique_data_item_54;
      case 55:
        return _struct._unique_data_item_55;
      case 56:
        return _struct._unique_data_item_56;
      case 57:
        return _struct._unique_data_item_57;
      case 58:
        return _struct._unique_data_item_58;
      case 59:
        return _struct._unique_data_item_59;
      case 60:
        return _struct._unique_data_item_60;
      case 61:
        return _struct._unique_data_item_61;
      case 62:
        return _struct._unique_data_item_62;
      case 63:
        return _struct._unique_data_item_63;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_data_item_0 = value;
        break;
      case 1:
        _struct._unique_data_item_1 = value;
        break;
      case 2:
        _struct._unique_data_item_2 = value;
        break;
      case 3:
        _struct._unique_data_item_3 = value;
        break;
      case 4:
        _struct._unique_data_item_4 = value;
        break;
      case 5:
        _struct._unique_data_item_5 = value;
        break;
      case 6:
        _struct._unique_data_item_6 = value;
        break;
      case 7:
        _struct._unique_data_item_7 = value;
        break;
      case 8:
        _struct._unique_data_item_8 = value;
        break;
      case 9:
        _struct._unique_data_item_9 = value;
        break;
      case 10:
        _struct._unique_data_item_10 = value;
        break;
      case 11:
        _struct._unique_data_item_11 = value;
        break;
      case 12:
        _struct._unique_data_item_12 = value;
        break;
      case 13:
        _struct._unique_data_item_13 = value;
        break;
      case 14:
        _struct._unique_data_item_14 = value;
        break;
      case 15:
        _struct._unique_data_item_15 = value;
        break;
      case 16:
        _struct._unique_data_item_16 = value;
        break;
      case 17:
        _struct._unique_data_item_17 = value;
        break;
      case 18:
        _struct._unique_data_item_18 = value;
        break;
      case 19:
        _struct._unique_data_item_19 = value;
        break;
      case 20:
        _struct._unique_data_item_20 = value;
        break;
      case 21:
        _struct._unique_data_item_21 = value;
        break;
      case 22:
        _struct._unique_data_item_22 = value;
        break;
      case 23:
        _struct._unique_data_item_23 = value;
        break;
      case 24:
        _struct._unique_data_item_24 = value;
        break;
      case 25:
        _struct._unique_data_item_25 = value;
        break;
      case 26:
        _struct._unique_data_item_26 = value;
        break;
      case 27:
        _struct._unique_data_item_27 = value;
        break;
      case 28:
        _struct._unique_data_item_28 = value;
        break;
      case 29:
        _struct._unique_data_item_29 = value;
        break;
      case 30:
        _struct._unique_data_item_30 = value;
        break;
      case 31:
        _struct._unique_data_item_31 = value;
        break;
      case 32:
        _struct._unique_data_item_32 = value;
        break;
      case 33:
        _struct._unique_data_item_33 = value;
        break;
      case 34:
        _struct._unique_data_item_34 = value;
        break;
      case 35:
        _struct._unique_data_item_35 = value;
        break;
      case 36:
        _struct._unique_data_item_36 = value;
        break;
      case 37:
        _struct._unique_data_item_37 = value;
        break;
      case 38:
        _struct._unique_data_item_38 = value;
        break;
      case 39:
        _struct._unique_data_item_39 = value;
        break;
      case 40:
        _struct._unique_data_item_40 = value;
        break;
      case 41:
        _struct._unique_data_item_41 = value;
        break;
      case 42:
        _struct._unique_data_item_42 = value;
        break;
      case 43:
        _struct._unique_data_item_43 = value;
        break;
      case 44:
        _struct._unique_data_item_44 = value;
        break;
      case 45:
        _struct._unique_data_item_45 = value;
        break;
      case 46:
        _struct._unique_data_item_46 = value;
        break;
      case 47:
        _struct._unique_data_item_47 = value;
        break;
      case 48:
        _struct._unique_data_item_48 = value;
        break;
      case 49:
        _struct._unique_data_item_49 = value;
        break;
      case 50:
        _struct._unique_data_item_50 = value;
        break;
      case 51:
        _struct._unique_data_item_51 = value;
        break;
      case 52:
        _struct._unique_data_item_52 = value;
        break;
      case 53:
        _struct._unique_data_item_53 = value;
        break;
      case 54:
        _struct._unique_data_item_54 = value;
        break;
      case 55:
        _struct._unique_data_item_55 = value;
        break;
      case 56:
        _struct._unique_data_item_56 = value;
        break;
      case 57:
        _struct._unique_data_item_57 = value;
        break;
      case 58:
        _struct._unique_data_item_58 = value;
        break;
      case 59:
        _struct._unique_data_item_59 = value;
        break;
      case 60:
        _struct._unique_data_item_60 = value;
        break;
      case 61:
        _struct._unique_data_item_61 = value;
        break;
      case 62:
        _struct._unique_data_item_62 = value;
        break;
      case 63:
        _struct._unique_data_item_63 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// struct sockaddr_can - the sockaddr structure for CAN sockets
/// @can_family:  address family number AF_CAN.
/// @can_ifindex: CAN network interface index.
/// @can_addr:    protocol specific address information
// class sockaddr_can extends ffi.Opaque {}

/// struct can_filter - CAN ID based filter in can_register().
/// @can_id:   relevant bits of CAN ID which are not masked out.
/// @can_mask: CAN mask (see description)
///
/// Description:
/// A filter matches, when
///
/// <received_can_id> & mask == can_id & mask
///
/// The filter can be inverted (CAN_INV_FILTER bit set in can_id) or it can
/// filter for error message frames (CAN_ERR_FLAG bit set in mask).
class can_filter extends ffi.Struct {
  @ffi.Uint32()
  external int can_id;

  @ffi.Uint32()
  external int can_mask;

  ArrayHelper_can_filter_level0 get filterdata =>
      ArrayHelper_can_filter_level0(this, [2], 0, 0);

  @ffi.Int16()
  external int canfilter_index;
}

const int MSG_OOB = 1;

const int MSG_PEEK = 2;

const int MSG_DONTROUTE = 4;

const int MSG_CTRUNC = 8;

const int MSG_PROXY = 16;

const int MSG_TRUNC = 32;

const int MSG_DONTWAIT = 64;

const int MSG_EOR = 128;

const int MSG_WAITALL = 256;

const int MSG_FIN = 512;

const int MSG_SYN = 1024;

const int MSG_CONFIRM = 2048;

const int MSG_RST = 4096;

const int MSG_ERRQUEUE = 8192;

const int MSG_NOSIGNAL = 16384;

const int MSG_MORE = 32768;

const int MSG_WAITFORONE = 65536;

const int MSG_BATCH = 262144;

const int MSG_ZEROCOPY = 67108864;

const int MSG_FASTOPEN = 536870912;

const int MSG_CMSG_CLOEXEC = 1073741824;

const int SCM_RIGHTS = 1;

const int SHUT_RD = 0;

const int SHUT_WR = 1;

const int SHUT_RDWR = 2;

const int IFF_UP = 1;

const int IFF_BROADCAST = 2;

const int IFF_DEBUG = 4;

const int IFF_LOOPBACK = 8;

const int IFF_POINTOPOINT = 16;

const int IFF_NOTRAILERS = 32;

const int IFF_RUNNING = 64;

const int IFF_NOARP = 128;

const int IFF_PROMISC = 256;

const int IFF_ALLMULTI = 512;

const int IFF_MASTER = 1024;

const int IFF_SLAVE = 2048;

const int IFF_MULTICAST = 4096;

const int IFF_PORTSEL = 8192;

const int IFF_AUTOMEDIA = 16384;

const int IFF_DYNAMIC = 32768;

const int SCM_CAN_RAW_ERRQUEUE = 1;

const int CAN_RAW_FILTER = 1;

const int CAN_RAW_ERR_FILTER = 2;

const int CAN_RAW_LOOPBACK = 3;

const int CAN_RAW_RECV_OWN_MSGS = 4;

const int CAN_RAW_FD_FRAMES = 5;

const int CAN_RAW_JOIN_FILTERS = 6;

const int TCGETS = 21505;

const int TCSETS = 21506;

const int TCSETSW = 21507;

const int TCSETSF = 21508;

const int TCGETA = 21509;

const int TCSETA = 21510;

const int TCSETAW = 21511;

const int TCSETAF = 21512;

const int TCSBRK = 21513;

const int TCXONC = 21514;

const int TCFLSH = 21515;

const int TCSBRKP = 21541;

const int TCGETX = 21554;

const int TCSETX = 21555;

const int TCSETXF = 21556;

const int TCSETXW = 21557;

const int EPOLL_CLOEXEC = 524288;

const int EPOLLIN = 1;

const int EPOLLPRI = 2;

const int EPOLLOUT = 4;

const int EPOLLRDNORM = 64;

const int EPOLLRDBAND = 128;

const int EPOLLWRNORM = 256;

const int EPOLLWRBAND = 512;

const int EPOLLMSG = 1024;

const int EPOLLERR = 8;

const int EPOLLHUP = 16;

const int EPOLLRDHUP = 8192;

const int EPOLLEXCLUSIVE = 268435456;

const int EPOLLWAKEUP = 536870912;

const int EPOLLONESHOT = 1073741824;

const int EPOLLET = 2147483648;

const int EPOLL_CTL_ADD = 1;

const int EPOLL_CTL_DEL = 2;

const int EPOLL_CTL_MOD = 3;

const int SOCK_STREAM = 1;

const int SOCK_DGRAM = 2;

const int SOCK_RAW = 3;

const int SOCK_RDM = 4;

const int SOCK_SEQPACKET = 5;

const int SOCK_DCCP = 6;

const int SOCK_PACKET = 10;

const int SOCK_CLOEXEC = 524288;

const int SOCK_NONBLOCK = 2048;

const int PF_UNSPEC = 0;

const int PF_LOCAL = 1;

const int PF_UNIX = 1;

const int PF_FILE = 1;

const int PF_INET = 2;

const int PF_AX25 = 3;

const int PF_IPX = 4;

const int PF_APPLETALK = 5;

const int PF_NETROM = 6;

const int PF_BRIDGE = 7;

const int PF_ATMPVC = 8;

const int PF_X25 = 9;

const int PF_INET6 = 10;

const int PF_ROSE = 11;

const int PF_DECnet = 12;

const int PF_NETBEUI = 13;

const int PF_SECURITY = 14;

const int PF_KEY = 15;

const int PF_NETLINK = 16;

const int PF_ROUTE = 16;

const int PF_PACKET = 17;

const int PF_ASH = 18;

const int PF_ECONET = 19;

const int PF_ATMSVC = 20;

const int PF_RDS = 21;

const int PF_SNA = 22;

const int PF_IRDA = 23;

const int PF_PPPOX = 24;

const int PF_WANPIPE = 25;

const int PF_LLC = 26;

const int PF_IB = 27;

const int PF_MPLS = 28;

const int PF_CAN = 29;

const int PF_TIPC = 30;

const int PF_BLUETOOTH = 31;

const int PF_IUCV = 32;

const int PF_RXRPC = 33;

const int PF_ISDN = 34;

const int PF_PHONET = 35;

const int PF_IEEE802154 = 36;

const int PF_CAIF = 37;

const int PF_ALG = 38;

const int PF_NFC = 39;

const int PF_VSOCK = 40;

const int PF_KCM = 41;

const int PF_QIPCRTR = 42;

const int PF_SMC = 43;

const int PF_XDP = 44;

const int PF_MAX = 45;

const int AF_UNSPEC = 0;

const int AF_LOCAL = 1;

const int AF_UNIX = 1;

const int AF_FILE = 1;

const int AF_INET = 2;

const int AF_AX25 = 3;

const int AF_IPX = 4;

const int AF_APPLETALK = 5;

const int AF_NETROM = 6;

const int AF_BRIDGE = 7;

const int AF_ATMPVC = 8;

const int AF_X25 = 9;

const int AF_INET6 = 10;

const int AF_ROSE = 11;

const int AF_DECnet = 12;

const int AF_NETBEUI = 13;

const int AF_SECURITY = 14;

const int AF_KEY = 15;

const int AF_NETLINK = 16;

const int AF_ROUTE = 16;

const int AF_PACKET = 17;

const int AF_ASH = 18;

const int AF_ECONET = 19;

const int AF_ATMSVC = 20;

const int AF_RDS = 21;

const int AF_SNA = 22;

const int AF_IRDA = 23;

const int AF_PPPOX = 24;

const int AF_WANPIPE = 25;

const int AF_LLC = 26;

const int AF_IB = 27;

const int AF_MPLS = 28;

const int AF_CAN = 29;

const int AF_TIPC = 30;

const int AF_BLUETOOTH = 31;

const int AF_IUCV = 32;

const int AF_RXRPC = 33;

const int AF_ISDN = 34;

const int AF_PHONET = 35;

const int AF_IEEE802154 = 36;

const int AF_CAIF = 37;

const int AF_ALG = 38;

const int AF_NFC = 39;

const int AF_VSOCK = 40;

const int AF_KCM = 41;

const int AF_QIPCRTR = 42;

const int AF_SMC = 43;

const int AF_XDP = 44;

const int AF_MAX = 45;

const int SOL_RAW = 255;

const int SOL_DECNET = 261;

const int SOL_X25 = 262;

const int SOL_PACKET = 263;

const int SOL_ATM = 264;

const int SOL_AAL = 265;

const int SOL_IRDA = 266;

const int SOL_NETBEUI = 267;

const int SOL_LLC = 268;

const int SOL_DCCP = 269;

const int SOL_NETLINK = 270;

const int SOL_TIPC = 271;

const int SOL_RXRPC = 272;

const int SOL_PPPOL2TP = 273;

const int SOL_BLUETOOTH = 274;

const int SOL_PNPIPE = 275;

const int SOL_RDS = 276;

const int SOL_IUCV = 277;

const int SOL_CAIF = 278;

const int SOL_ALG = 279;

const int SOL_NFC = 280;

const int SOL_KCM = 281;

const int SOL_TLS = 282;

const int SOL_XDP = 283;

const int SOMAXCONN = 4096;

const int MSG_OOB_1 = 1;

const int MSG_PEEK_1 = 2;

const int MSG_DONTROUTE_1 = 4;

const int MSG_CTRUNC_1 = 8;

const int MSG_PROXY_1 = 16;

const int MSG_TRUNC_1 = 32;

const int MSG_DONTWAIT_1 = 64;

const int MSG_EOR_1 = 128;

const int MSG_WAITALL_1 = 256;

const int MSG_FIN_1 = 512;

const int MSG_SYN_1 = 1024;

const int MSG_CONFIRM_1 = 2048;

const int MSG_RST_1 = 4096;

const int MSG_ERRQUEUE_1 = 8192;

const int MSG_NOSIGNAL_1 = 16384;

const int MSG_MORE_1 = 32768;

const int MSG_WAITFORONE_1 = 65536;

const int MSG_BATCH_1 = 262144;

const int MSG_ZEROCOPY_1 = 67108864;

const int MSG_FASTOPEN_1 = 536870912;

const int MSG_CMSG_CLOEXEC_1 = 1073741824;

const int SOL_SOCKET = 1;

const int SO_DEBUG = 1;

const int SO_REUSEADDR = 2;

const int SO_TYPE = 3;

const int SO_ERROR = 4;

const int SO_DONTROUTE = 5;

const int SO_BROADCAST = 6;

const int SO_SNDBUF = 7;

const int SO_RCVBUF = 8;

const int SO_SNDBUFFORCE = 32;

const int SO_RCVBUFFORCE = 33;

const int SO_KEEPALIVE = 9;

const int SO_OOBINLINE = 10;

const int SO_NO_CHECK = 11;

const int SO_PRIORITY = 12;

const int SO_LINGER = 13;

const int SO_BSDCOMPAT = 14;

const int SO_REUSEPORT = 15;

const int SO_PASSCRED = 16;

const int SO_PEERCRED = 17;

const int SO_RCVLOWAT = 18;

const int SO_SNDLOWAT = 19;

const int SO_RCVTIMEO_OLD = 20;

const int SO_SNDTIMEO_OLD = 21;

const int SO_SECURITY_AUTHENTICATION = 22;

const int SO_SECURITY_ENCRYPTION_TRANSPORT = 23;

const int SO_SECURITY_ENCRYPTION_NETWORK = 24;

const int SO_BINDTODEVICE = 25;

const int SO_ATTACH_FILTER = 26;

const int SO_DETACH_FILTER = 27;

const int SO_GET_FILTER = 26;

const int SO_PEERNAME = 28;

const int SO_ACCEPTCONN = 30;

const int SO_PEERSEC = 31;

const int SO_PASSSEC = 34;

const int SO_MARK = 36;

const int SO_PROTOCOL = 38;

const int SO_DOMAIN = 39;

const int SO_RXQ_OVFL = 40;

const int SO_WIFI_STATUS = 41;

const int SO_PEEK_OFF = 42;

const int SO_NOFCS = 43;

const int SO_LOCK_FILTER = 44;

const int SO_SELECT_ERR_QUEUE = 45;

const int SO_BUSY_POLL = 46;

const int SO_MAX_PACING_RATE = 47;

const int SO_BPF_EXTENSIONS = 48;

const int SO_INCOMING_CPU = 49;

const int SO_ATTACH_BPF = 50;

const int SO_DETACH_BPF = 27;

const int SO_ATTACH_REUSEPORT_CBPF = 51;

const int SO_ATTACH_REUSEPORT_EBPF = 52;

const int SO_CNX_ADVICE = 53;

const int SO_MEMINFO = 55;

const int SO_INCOMING_NAPI_ID = 56;

const int SO_COOKIE = 57;

const int SO_PEERGROUPS = 59;

const int SO_ZEROCOPY = 60;

const int SO_TXTIME = 61;

const int SO_BINDTOIFINDEX = 62;

const int SO_TIMESTAMP_OLD = 29;

const int SO_TIMESTAMPNS_OLD = 35;

const int SO_TIMESTAMPING_OLD = 37;

const int SO_TIMESTAMP_NEW = 63;

const int SO_TIMESTAMPNS_NEW = 64;

const int SO_TIMESTAMPING_NEW = 65;

const int SO_RCVTIMEO_NEW = 66;

const int SO_SNDTIMEO_NEW = 67;

const int SO_DETACH_REUSEPORT_BPF = 68;

const int SO_TIMESTAMP = 29;

const int SO_TIMESTAMPNS = 35;

const int SO_TIMESTAMPING = 37;

const int SO_RCVTIMEO = 20;

const int SO_SNDTIMEO = 21;

const int SHUT_RD_1 = 0;

const int SHUT_WR_1 = 1;

const int SHUT_RDWR_1 = 2;

const int EPERM = 1;

const int ENOENT = 2;

const int ESRCH = 3;

const int EINTR = 4;

const int EIO = 5;

const int ENXIO = 6;

const int E2BIG = 7;

const int ENOEXEC = 8;

const int EBADF = 9;

const int ECHILD = 10;

const int EAGAIN = 11;

const int ENOMEM = 12;

const int EACCES = 13;

const int EFAULT = 14;

const int ENOTBLK = 15;

const int EBUSY = 16;

const int EEXIST = 17;

const int EXDEV = 18;

const int ENODEV = 19;

const int ENOTDIR = 20;

const int EISDIR = 21;

const int EINVAL = 22;

const int ENFILE = 23;

const int EMFILE = 24;

const int ENOTTY = 25;

const int ETXTBSY = 26;

const int EFBIG = 27;

const int ENOSPC = 28;

const int ESPIPE = 29;

const int EROFS = 30;

const int EMLINK = 31;

const int EPIPE = 32;

const int EDOM = 33;

const int ERANGE = 34;

const int EDEADLK = 35;

const int ENAMETOOLONG = 36;

const int ENOLCK = 37;

const int ENOSYS = 38;

const int ENOTEMPTY = 39;

const int ELOOP = 40;

const int EWOULDBLOCK = 11;

const int ENOMSG = 42;

const int EIDRM = 43;

const int ECHRNG = 44;

const int EL2NSYNC = 45;

const int EL3HLT = 46;

const int EL3RST = 47;

const int ELNRNG = 48;

const int EUNATCH = 49;

const int ENOCSI = 50;

const int EL2HLT = 51;

const int EBADE = 52;

const int EBADR = 53;

const int EXFULL = 54;

const int ENOANO = 55;

const int EBADRQC = 56;

const int EBADSLT = 57;

const int EDEADLOCK = 35;

const int EBFONT = 59;

const int ENOSTR = 60;

const int ENODATA = 61;

const int ETIME = 62;

const int ENOSR = 63;

const int ENONET = 64;

const int ENOPKG = 65;

const int EREMOTE = 66;

const int ENOLINK = 67;

const int EADV = 68;

const int ESRMNT = 69;

const int ECOMM = 70;

const int EPROTO = 71;

const int EMULTIHOP = 72;

const int EDOTDOT = 73;

const int EBADMSG = 74;

const int EOVERFLOW = 75;

const int ENOTUNIQ = 76;

const int EBADFD = 77;

const int EREMCHG = 78;

const int ELIBACC = 79;

const int ELIBBAD = 80;

const int ELIBSCN = 81;

const int ELIBMAX = 82;

const int ELIBEXEC = 83;

const int EILSEQ = 84;

const int ERESTART = 85;

const int ESTRPIPE = 86;

const int EUSERS = 87;

const int ENOTSOCK = 88;

const int EDESTADDRREQ = 89;

const int EMSGSIZE = 90;

const int EPROTOTYPE = 91;

const int ENOPROTOOPT = 92;

const int EPROTONOSUPPORT = 93;

const int ESOCKTNOSUPPORT = 94;

const int EOPNOTSUPP = 95;

const int EPFNOSUPPORT = 96;

const int EAFNOSUPPORT = 97;

const int EADDRINUSE = 98;

const int EADDRNOTAVAIL = 99;

const int ENETDOWN = 100;

const int ENETUNREACH = 101;

const int ENETRESET = 102;

const int ECONNABORTED = 103;

const int ECONNRESET = 104;

const int ENOBUFS = 105;

const int EISCONN = 106;

const int ENOTCONN = 107;

const int ESHUTDOWN = 108;

const int ETOOMANYREFS = 109;

const int ETIMEDOUT = 110;

const int ECONNREFUSED = 111;

const int EHOSTDOWN = 112;

const int EHOSTUNREACH = 113;

const int EALREADY = 114;

const int EINPROGRESS = 115;

const int ESTALE = 116;

const int EUCLEAN = 117;

const int ENOTNAM = 118;

const int ENAVAIL = 119;

const int EISNAM = 120;

const int EREMOTEIO = 121;

const int EDQUOT = 122;

const int ENOMEDIUM = 123;

const int EMEDIUMTYPE = 124;

const int ECANCELED = 125;

const int ENOKEY = 126;

const int EKEYEXPIRED = 127;

const int EKEYREVOKED = 128;

const int EKEYREJECTED = 129;

const int EOWNERDEAD = 130;

const int ENOTRECOVERABLE = 131;

const int ERFKILL = 132;

const int EHWPOISON = 133;

const int ENOTSUP = 95;

const int O_ACCMODE = 3;

const int O_RDONLY = 0;

const int O_WRONLY = 1;

const int O_RDWR = 2;

const int O_CREAT = 64;

const int O_EXCL = 128;

const int O_NOCTTY = 256;

const int O_TRUNC = 512;

const int O_APPEND = 1024;

const int O_NONBLOCK = 2048;

const int O_NDELAY = 2048;

const int O_SYNC = 1052672;

const int O_FSYNC = 1052672;

const int O_ASYNC = 8192;

const int O_DIRECTORY = 16384;

const int O_NOFOLLOW = 32768;

const int O_CLOEXEC = 524288;

const int O_DSYNC = 4096;

const int O_RSYNC = 1052672;

const int IGNBRK = 1;

const int BRKINT = 2;

const int IGNPAR = 4;

const int PARMRK = 8;

const int INPCK = 16;

const int ISTRIP = 32;

const int INLCR = 64;

const int IGNCR = 128;

const int ICRNL = 256;

const int IUCLC = 512;

const int IXON = 1024;

const int IXANY = 2048;

const int IXOFF = 4096;

const int IMAXBEL = 8192;

const int IFHWADDRLEN = 6;

const int IFNAMSIZ = 16;

const int CAN_EFF_FLAG = 2147483648;

const int CAN_RTR_FLAG = 1073741824;

const int CAN_ERR_FLAG = 536870912;

const int CAN_SFF_MASK = 2047;

const int CAN_EFF_MASK = 536870911;

const int CAN_ERR_MASK = 536870911;

const int CAN_SFF_ID_BITS = 11;

const int CAN_EFF_ID_BITS = 29;

const int CAN_MAX_DLC = 8;

const int CAN_MAX_DLEN = 8;

const int CANFD_MAX_DLC = 15;

const int CANFD_MAX_DLEN = 64;

const int CANFD_BRS = 1;

const int CANFD_ESI = 2;

const int CAN_MTU = 16;

const int CANFD_MTU = 72;

const int CAN_RAW = 1;

const int CAN_BCM = 2;

const int CAN_TP16 = 3;

const int CAN_TP20 = 4;

const int CAN_MCNET = 5;

const int CAN_ISOTP = 6;

const int CAN_J1939 = 7;

const int CAN_NPROTO = 8;

const int SOL_CAN_BASE = 100;

const int CAN_INV_FILTER = 536870912;

const int CAN_RAW_FILTER_MAX = 512;

const int SOL_CAN_RAW = 101;

const int CAN_ERR_DLC = 8;

const int CAN_ERR_TX_TIMEOUT = 1;

const int CAN_ERR_LOSTARB = 2;

const int CAN_ERR_CRTL = 4;

const int CAN_ERR_PROT = 8;

const int CAN_ERR_TRX = 16;

const int CAN_ERR_ACK = 32;

const int CAN_ERR_BUSOFF = 64;

const int CAN_ERR_BUSERROR = 128;

const int CAN_ERR_RESTARTED = 256;

const int CAN_ERR_LOSTARB_UNSPEC = 0;

const int CAN_ERR_CRTL_UNSPEC = 0;

const int CAN_ERR_CRTL_RX_OVERFLOW = 1;

const int CAN_ERR_CRTL_TX_OVERFLOW = 2;

const int CAN_ERR_CRTL_RX_WARNING = 4;

const int CAN_ERR_CRTL_TX_WARNING = 8;

const int CAN_ERR_CRTL_RX_PASSIVE = 16;

const int CAN_ERR_CRTL_TX_PASSIVE = 32;

const int CAN_ERR_CRTL_ACTIVE = 64;

const int CAN_ERR_PROT_UNSPEC = 0;

const int CAN_ERR_PROT_BIT = 1;

const int CAN_ERR_PROT_FORM = 2;

const int CAN_ERR_PROT_STUFF = 4;

const int CAN_ERR_PROT_BIT0 = 8;

const int CAN_ERR_PROT_BIT1 = 16;

const int CAN_ERR_PROT_OVERLOAD = 32;

const int CAN_ERR_PROT_ACTIVE = 64;

const int CAN_ERR_PROT_TX = 128;

const int CAN_ERR_PROT_LOC_UNSPEC = 0;

const int CAN_ERR_PROT_LOC_SOF = 3;

const int CAN_ERR_PROT_LOC_ID28_21 = 2;

const int CAN_ERR_PROT_LOC_ID20_18 = 6;

const int CAN_ERR_PROT_LOC_SRTR = 4;

const int CAN_ERR_PROT_LOC_IDE = 5;

const int CAN_ERR_PROT_LOC_ID17_13 = 7;

const int CAN_ERR_PROT_LOC_ID12_05 = 15;

const int CAN_ERR_PROT_LOC_ID04_00 = 14;

const int CAN_ERR_PROT_LOC_RTR = 12;

const int CAN_ERR_PROT_LOC_RES1 = 13;

const int CAN_ERR_PROT_LOC_RES0 = 9;

const int CAN_ERR_PROT_LOC_DLC = 11;

const int CAN_ERR_PROT_LOC_DATA = 10;

const int CAN_ERR_PROT_LOC_CRC_SEQ = 8;

const int CAN_ERR_PROT_LOC_CRC_DEL = 24;

const int CAN_ERR_PROT_LOC_ACK = 25;

const int CAN_ERR_PROT_LOC_ACK_DEL = 27;

const int CAN_ERR_PROT_LOC_EOF = 26;

const int CAN_ERR_PROT_LOC_INTERM = 18;

const int CAN_ERR_TRX_UNSPEC = 0;

const int CAN_ERR_TRX_CANH_NO_WIRE = 4;

const int CAN_ERR_TRX_CANH_SHORT_TO_BAT = 5;

const int CAN_ERR_TRX_CANH_SHORT_TO_VCC = 6;

const int CAN_ERR_TRX_CANH_SHORT_TO_GND = 7;

const int CAN_ERR_TRX_CANL_NO_WIRE = 64;

const int CAN_ERR_TRX_CANL_SHORT_TO_BAT = 80;

const int CAN_ERR_TRX_CANL_SHORT_TO_VCC = 96;

const int CAN_ERR_TRX_CANL_SHORT_TO_GND = 112;

const int CAN_ERR_TRX_CANL_SHORT_TO_CANH = 128;

typedef Native_ioctl = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Uint32 __request,
);

typedef _dart_ioctl = int Function(
  int __fd,
  int __request,
);

typedef Native_epoll_create = ffi.Int32 Function(
  ffi.Int32 __size,
);

typedef _dart_epoll_create = int Function(
  int __size,
);

typedef Native_epoll_create1 = ffi.Int32 Function(
  ffi.Int32 __flags,
);

typedef _dart_epoll_create1 = int Function(
  int __flags,
);

typedef Native_epoll_ctl = ffi.Int32 Function(
  ffi.Int32 __epfd,
  ffi.Int32 __op,
  ffi.Int32 __fd,
  ffi.Pointer<epoll_event> __event,
);

typedef _dart_epoll_ctl = int Function(
  int __epfd,
  int __op,
  int __fd,
  ffi.Pointer<epoll_event> __event,
);

typedef Native_epoll_wait = ffi.Int32 Function(
  ffi.Int32 __epfd,
  ffi.Pointer<epoll_event> __events,
  ffi.Int32 __maxevents,
  ffi.Int32 __timeout,
);

typedef _dart_epoll_wait = int Function(
  int __epfd,
  ffi.Pointer<epoll_event> __events,
  int __maxevents,
  int __timeout,
);

typedef Native_socket = ffi.Int32 Function(
  ffi.Int32 __domain,
  ffi.Int32 __type,
  ffi.Int32 __protocol,
);

typedef _dart_socket = int Function(
  int __domain,
  int __type,
  int __protocol,
);

typedef Native_socketpair = ffi.Int32 Function(
  ffi.Int32 __domain,
  ffi.Int32 __type,
  ffi.Int32 __protocol,
  ffi.Pointer<ffi.Int32> __fds,
);

typedef _dart_socketpair = int Function(
  int __domain,
  int __type,
  int __protocol,
  ffi.Pointer<ffi.Int32> __fds,
);

typedef Native_bind = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<sockaddr> __addr,
  ffi.Uint32 __len,
);

typedef _dart_bind = int Function(
  int __fd,
  ffi.Pointer<sockaddr> __addr,
  int __len,
);

typedef Native_getsockname = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<sockaddr> __addr,
  ffi.Pointer<ffi.Uint32> __len,
);

typedef _dart_getsockname = int Function(
  int __fd,
  ffi.Pointer<sockaddr> __addr,
  ffi.Pointer<ffi.Uint32> __len,
);

typedef Native_connect = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<sockaddr> __addr,
  ffi.Uint32 __len,
);

typedef _dart_connect = int Function(
  int __fd,
  ffi.Pointer<sockaddr> __addr,
  int __len,
);

typedef Native_getpeername = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<sockaddr> __addr,
  ffi.Pointer<ffi.Uint32> __len,
);

typedef _dart_getpeername = int Function(
  int __fd,
  ffi.Pointer<sockaddr> __addr,
  ffi.Pointer<ffi.Uint32> __len,
);

typedef Native_send = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint32 __n,
  ffi.Int32 __flags,
);

typedef _dart_send = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __n,
  int __flags,
);

typedef Native_recv = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint32 __n,
  ffi.Int32 __flags,
);

typedef _dart_recv = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __n,
  int __flags,
);

typedef Native_recvfrom = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint32 __n,
  ffi.Int32 __flags,
  ffi.Pointer<sockaddr> __addr,
  ffi.Pointer<ffi.Uint32> __addr_len,
);

typedef _dart_recvfrom = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __n,
  int __flags,
  ffi.Pointer<sockaddr> __addr,
  ffi.Pointer<ffi.Uint32> __addr_len,
);

typedef Native_sendmsg = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<msghdr> __message,
  ffi.Int32 __flags,
);

typedef _dart_sendmsg = int Function(
  int __fd,
  ffi.Pointer<msghdr> __message,
  int __flags,
);

typedef Native_recvmsg = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<msghdr> __message,
  ffi.Int32 __flags,
);

typedef _dart_recvmsg = int Function(
  int __fd,
  ffi.Pointer<msghdr> __message,
  int __flags,
);

typedef Native_getsockopt = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int32 __level,
  ffi.Int32 __optname,
  ffi.Pointer<ffi.Void> __optval,
  ffi.Pointer<ffi.Uint32> __optlen,
);

typedef _dart_getsockopt = int Function(
  int __fd,
  int __level,
  int __optname,
  ffi.Pointer<ffi.Void> __optval,
  ffi.Pointer<ffi.Uint32> __optlen,
);

typedef Native_setsockopt = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int32 __level,
  ffi.Int32 __optname,
  ffi.Pointer<ffi.Void> __optval,
  ffi.Uint32 __optlen,
);

typedef _dart_setsockopt = int Function(
  int __fd,
  int __level,
  int __optname,
  ffi.Pointer<ffi.Void> __optval,
  int __optlen,
);

typedef Native_listen = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int32 __n,
);

typedef _dart_listen = int Function(
  int __fd,
  int __n,
);

typedef Native_accept = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<sockaddr> __addr,
  ffi.Pointer<ffi.Uint32> __addr_len,
);

typedef _dart_accept = int Function(
  int __fd,
  ffi.Pointer<sockaddr> __addr,
  ffi.Pointer<ffi.Uint32> __addr_len,
);

typedef Native_shutdown = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int32 __how,
);

typedef _dart_shutdown = int Function(
  int __fd,
  int __how,
);

typedef Native_errno_location = ffi.Pointer<ffi.Int32> Function();

typedef _dart_errno_location = ffi.Pointer<ffi.Int32> Function();

typedef Native_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> __file,
  ffi.Int32 __oflag,
);

typedef _dart_open = int Function(
  ffi.Pointer<ffi.Uint8> __file,
  int __oflag,
);

typedef Native_close = ffi.Int32 Function(
  ffi.Int32 __fd,
);

typedef _dart_close = int Function(
  int __fd,
);

typedef Native_read = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint32 __nbytes,
);

typedef _dart_read = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __nbytes,
);

typedef Native_write = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint32 __n,
);

typedef _dart_write = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __n,
);

typedef Native_tcgetpgrp = ffi.Int32 Function(
  ffi.Int32 __fd,
);

typedef _dart_tcgetpgrp = int Function(
  int __fd,
);

typedef Native_tcsetpgrp = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int32 __pgrp_id,
);

typedef _dart_tcsetpgrp = int Function(
  int __fd,
  int __pgrp_id,
);

/// Helper for array `sa_data` in struct `sockaddr`.
class ArrayHelper_can_filter_level0 {
  final can_filter _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_can_filter_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..$length exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct.can_id;
      case 1:
        return _struct.can_mask;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct.can_id = value;
        break;
      case 1:
        _struct.can_mask = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}
